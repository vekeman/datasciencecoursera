}
if(outcome=='pneumonia'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
## For each state, find the hospital of the given rank
## add a column to rank order on
x <- data.frame(rank_order = 1:nrow(temp.hospital))
##cbind it to the original data
forStateComplete<-cbind(forStateComplete, x)
##set up two control variables and initialize them
currentState<-"XX"
currentRank<-1
for(i in 1:nrow(forStateComplete)) {
##check to see if new state, if it is set the counter to 1
if(currentState!=forStateComplete[i,2]){
currentRank<-1
} else {
## if not, increment the counter
currentRank<-currentRank+1
}
## assign the rank value
forStateComplete[i,4]<-currentRank
##write the state value into the control variable
currentState<-forStateComplete[i,2]
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
forStateComplete
}
temp.hospital<-rankall("heart attack", "best")
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that the outcome is valid
if(FALSE==outcome %in% c('heart attack','heart failure','pneumonia')){
stop("invalid outcome")
}
## Reduce to just theoutcome of interest
if(outcome=='heart attack'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
if(outcome=='heart failure'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
if(outcome=='pneumonia'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
## For each state, find the hospital of the given rank
## add a column to rank order on
x <- data.frame(rank_order = 1:nrow(forStateComplete))
##cbind it to the original data
forStateComplete<-cbind(forStateComplete, x)
##set up two control variables and initialize them
currentState<-"XX"
currentRank<-1
for(i in 1:nrow(forStateComplete)) {
##check to see if new state, if it is set the counter to 1
if(currentState!=forStateComplete[i,2]){
currentRank<-1
} else {
## if not, increment the counter
currentRank<-currentRank+1
}
## assign the rank value
forStateComplete[i,4]<-currentRank
##write the state value into the control variable
currentState<-forStateComplete[i,2]
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
forStateComplete
}
temp.hospital<-rankall("heart attack", "best")
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that the outcome is valid
if(FALSE==outcome %in% c('heart attack','heart failure','pneumonia')){
stop("invalid outcome")
}
## Reduce to just theoutcome of interest
if(outcome=='heart attack'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='heart failure'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='pneumonia'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
## For each state, find the hospital of the given rank
## add a column to rank order on
x <- data.frame(rank_order = 1:nrow(forStateComplete))
##cbind it to the original data
forStateComplete<-cbind(forStateComplete, x)
##set up two control variables and initialize them
currentState<-"XX"
currentRank<-1
for(i in 1:nrow(forStateComplete)) {
##check to see if new state, if it is set the counter to 1
if(currentState!=forStateComplete[i,2]){
currentRank<-1
} else {
## if not, increment the counter
currentRank<-currentRank+1
}
## assign the rank value
forStateComplete[i,4]<-currentRank
##write the state value into the control variable
currentState<-forStateComplete[i,2]
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
if(num=="best" | num=="worst"){
forStateComplete<-subset(forStateComplete, select=c("hospital","state"), rank_order==1)
} else {
forStateComplete<-subset(forStateComplete, select=c("hospital","state"), rank_order==num)
}
forStateComplete
}
##part 4
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that the outcome is valid
if(FALSE==outcome %in% c('heart attack','heart failure','pneumonia')){
stop("invalid outcome")
}
## Reduce to just theoutcome of interest
if(outcome=='heart attack'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='heart failure'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='pneumonia'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
## For each state, find the hospital of the given rank
## add a column to rank order on
x <- data.frame(rank_order = 1:nrow(forStateComplete))
##cbind it to the original data
forStateComplete<-cbind(forStateComplete, x)
##set up two control variables and initialize them
currentState<-"XX"
currentRank<-1
for(i in 1:nrow(forStateComplete)) {
##check to see if new state, if it is set the counter to 1
if(currentState!=forStateComplete[i,2]){
currentRank<-1
} else {
## if not, increment the counter
currentRank<-currentRank+1
}
## assign the rank value
forStateComplete[i,4]<-currentRank
##write the state value into the control variable
currentState<-forStateComplete[i,2]
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
forStateComplete
}
temp.hospital<-rankall("heart attack", "best")
temp.hospital
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that the outcome is valid
if(FALSE==outcome %in% c('heart attack','heart failure','pneumonia')){
stop("invalid outcome")
}
## Reduce to just theoutcome of interest
if(outcome=='heart attack'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='heart failure'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='pneumonia'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
## For each state, find the hospital of the given rank
## add a column to rank order on
x <- data.frame(rank_order = 1:nrow(forStateComplete))
##cbind it to the original data
forStateComplete<-cbind(forStateComplete, x)
##set up two control variables and initialize them
currentState<-"XX"
currentRank<-1
for(i in 1:nrow(forStateComplete)) {
##check to see if new state, if it is set the counter to 1
if(currentState!=forStateComplete[i,2]){
currentRank<-1
} else {
## if not, increment the counter
currentRank<-currentRank+1
}
## assign the rank value
forStateComplete[i,4]<-currentRank
##write the state value into the control variable
currentState<-forStateComplete[i,2]
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
forStateComplete
}
temp.hospital<-rankall("heart attack", "worst")
temp.hospital
temp.hospital<-rankall("heart attack", 5)
temp.hospital
head(rankall("heart attack", 20), 10)
forStateComplete
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that the outcome is valid
if(FALSE==outcome %in% c('heart attack','heart failure','pneumonia')){
stop("invalid outcome")
}
## Reduce to just theoutcome of interest
if(outcome=='heart attack'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='heart failure'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
if(outcome=='pneumonia'){
##select only that outcome
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","State","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
## apply generic names to columns
names(forStateComplete) <- c("hospital", "state", "outcome_rate")
##convert to number
forStateComplete[,3] <- suppressWarnings(as.numeric(forStateComplete[, 3]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort will check for best or worst. if worst, will sort backward
if(num=="worst"){
forStateComplete<-forStateComplete[order(forStateComplete$state, -forStateComplete$outcome_rate, forStateComplete$hospital), ]
}else{
forStateComplete<-forStateComplete[order(forStateComplete$state, forStateComplete$outcome_rate, forStateComplete$hospital), ]
}
}
## For each state, find the hospital of the given rank
## add a column to rank order on
x <- data.frame(rank_order = 1:nrow(forStateComplete))
##cbind it to the original data
forStateComplete<-cbind(forStateComplete, x)
##set up two control variables and initialize them
currentState<-"XX"
currentRank<-1
for(i in 1:nrow(forStateComplete)) {
##check to see if new state, if it is set the counter to 1
if(currentState!=forStateComplete[i,2]){
currentRank<-1
} else {
## if not, increment the counter
currentRank<-currentRank+1
}
## assign the rank value
forStateComplete[i,4]<-currentRank
##write the state value into the control variable
currentState<-forStateComplete[i,2]
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
if(num=="best" | num=="worst"){
forStateComplete<-subset(forStateComplete, select=c("hospital","state"), rank_order==1)
} else {
forStateComplete<-subset(forStateComplete, select=c("hospital","state"), rank_order==num)
}
forStateComplete
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
best <- function(state, outcome) {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(FALSE==state %in% outcomeData[,7]){
stop("invalid state")
}
if(FALSE==outcome %in% c('heart attack','heart failure','pneumonia')){
stop("invalid outcome")
}
if(outcome=='heart attack'){
##reduce to only records for that state as well as only complete cases
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","State"), State==state)
##convert to number
forStateComplete[,2] <- suppressWarnings(as.numeric(forStateComplete[, 2]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort
forStateComplete<-forStateComplete[order(forStateComplete$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, forStateComplete$Hospital.Name), ]
}
if(outcome=='heart failure'){
##reduce to only records for that state as well as only complete cases
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","State"), State==state)
##convert to number
forStateComplete[,2] <- suppressWarnings(as.numeric(forStateComplete[, 2]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort
forStateComplete<-forStateComplete[order(forStateComplete$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, forStateComplete$Hospital.Name), ]
}
if(outcome=='pneumonia'){
##reduce to only records for that state as well as only complete cases
forStateComplete<-subset(outcomeData, select=c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia","State"), State==state)
##convert to number
forStateComplete[,2] <- suppressWarnings(as.numeric(forStateComplete[, 2]))
## drop NA
forStateComplete<-forStateComplete[complete.cases(forStateComplete), ]
## sort
forStateComplete<-forStateComplete[order(forStateComplete$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, forStateComplete$Hospital.Name), ]
}
## Return hospital name in that state with lowest 30-day death
## rate
forStateComplete[1,1]
}
best("SC", "heart attack")
best("NY", "pneumonia")
rankhospital("NC", "heart attack", "worst")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
